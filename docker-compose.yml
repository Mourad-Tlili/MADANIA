# docker-compose.yml
# Defines and runs multi-container Docker applications.
# Secrets are expected to be in a .env file (for local dev) or set in the host environment.

version: '3.8' # Specifies the Docker Compose file format version.

services:
  # MySQL Database Service
  mysql_db:
    image: mysql:8.0 # Use an official MySQL image. Version 8.0 is common.
    container_name: mysql_for_user_app # A friendly name for the MySQL container.
    restart: unless-stopped # Policy for restarting the container.
    environment:
      # These variables will be substituted from the .env file or the host environment.
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD_DEV}
      MYSQL_DATABASE: ${MYSQL_DATABASE_DEV:-user_db} # Uses user_db if MYSQL_DATABASE_DEV is not set in .env
      MYSQL_USER: ${MYSQL_USER_DEV}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD_DEV}
    ports:
      # Map port 3306 of the container to port 3306 on the host machine.
      - "3306:3306"
    volumes:
      # Persist MySQL data using a named volume.
      - mysql_app_data:/var/lib/mysql
    networks:
      # Connect this service to a custom network.
      - app-network

  # Your Spring Boot Application Service (running in Tomcat)
  my_app_tomcat_service:
    build:
      context: . # The build context is the current directory (where this docker-compose.yml is).
      dockerfile: Dockerfile # Specifies the Dockerfile to use for building this service's image.
      args:
        # Pass the WAR file name as a build argument to the Dockerfile.
        # Ensure this matches the actual name of your PLAIN WAR file generated by Gradle.
        WAR_FILE_NAME: mourad-tlili-interview-demo-0.0.1-SNAPSHOT-plain.war
    container_name: spring_boot_on_tomcat # A friendly name for your application container.
    restart: unless-stopped
    depends_on:
      - mysql_db # Ensures mysql_db service is started before this service.
    ports:
      # Map port 8080 of the Tomcat container to port 8080 on the host machine.
      - "8080:8080"
    environment:
      # Spring Boot datasource properties, passed as environment variables to your application.
      # The application running in Tomcat will use these to connect to the 'mysql_db' service.
      # 'mysql_db' is resolvable as a hostname within the 'app-network'.
      # MYSQL_DATABASE_DEV is used here to construct the URL, defaulting to 'user_db' if not set in .env
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql_db:3306/${MYSQL_DATABASE_DEV:-user_db}?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME_DEV}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD_DEV}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update # Or 'validate'/'none' for production. 'update' is convenient for dev.
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.MySQLDialect
      SPRING_JPA_SHOW_SQL: "true" # Enclose boolean/numeric in quotes if issues with compose interpretation
      SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: "true"

      # Optional: If your WAR is deployed as ROOT.war, Spring Boot's context path will be '/'.
      # SERVER_SERVLET_CONTEXT_PATH: / # If deployed as ROOT.war

      # Add any other environment variables your Spring Boot application needs.
      # Example:
      # LOGGING_LEVEL_ORG_INTERVIEW_DEMO: DEBUG
    networks:
      - app-network

# Named volume for MySQL data persistence.
volumes:
  mysql_app_data:
    driver: local # Specifies the local driver for the volume.

# Custom network to allow services to communicate with each other by service name.
networks:
  app-network:
    driver: bridge # Default network driver.
